unit uKeyHook;

interface

uses
  System.Classes, Winapi.Windows, System.SysUtils, Messages;

type
  TKeyEvent = procedure (AKey: Cardinal) of object;

  procedure AttachEvent(AEvent: TKeyEvent);
  procedure DetachEvent;

implementation

var
  hKeyHook: Integer;
  KeyEvent: TKeyEvent = nil;


procedure AttachEvent(AEvent: TKeyEvent);
begin
  KeyEvent := AEvent;
end;

procedure DetachEvent;
begin
  KeyEvent := nil;
end;

//全局键盘钩子消息处理函数
function KeyHookProc(nCode:Integer; wP:WPARAM; lP:LPARAM):LRESULT; stdcall;
var
  pEvt: TEventMsg;
  vKey: Cardinal;
begin
  if (nCode = HC_ACTION) then
  begin
    vKey := 0;
    case wP of
      WM_SYSKEYDOWN, WM_KEYDOWN:
      begin
        pEvt := PEventMsg(LP)^;
        vKey := LOBYTE(pEvt.message);
        if Assigned(KeyEvent) then
        begin
//          DetachHook;
          KeyEvent(vKey);
//          AttachHook;
        end;
      end;
      WM_SYSKEYUP, WM_KEYUP:;
    end;
  end;
  result := CallNextHookEx(hKeyHook, nCode, wP, lP);
end;


procedure AttachHook;
begin
  hKeyHook := SetWindowsHookEx(WH_KEYBOARD_LL, @KeyHookProc, hInstance, 0);
end;

procedure DetachHook;
begin
  UnhookWindowsHookEx(hKeyHook);
end;

initialization
//  AttachHook;

finalization
//  DetachHook;


end.
